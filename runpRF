#!/bin/bash

# remove id files
if [ -f stim.id ] 
then
  rm -f stim.id
fi
if [ -f func.id ] 
then
  rm -f func.id
fi
if [ -f task.id ] 
then
  rm -f task.id
fi

# login (you only need to run this once every 30 days) 
#bl login --ttl 30

# get the project name
projectId=`bl project query -s "pRF Test" --json | jq -r '.[0]._id'`
echo "(runpRF) projectId:$projectId"

# get the app id
appId=`bl app query -s "pRF" --json | jq -r '.[0]._id'`
echo "(runpRF) appId:$appId"

# get the ids for the datatypes we need
stimulusId=`bl datatype query -s stimulus --json | jq -r '.[0]._id'`
boldId=`bl datatype query -s func --json | jq -r '.[0]._id'`
echo "(runpRF) stimulusId:$stimulusId boldId:$boldId"

# upload stimulus
echo "(runpRF) uploading stimulus image as datatype:$stimulusId to project:$projectId"
echo "bl dataset upload --datatype $stimulusId --project $projectId --subject \"justinTest\" --json ./stimulus | jq -r '._id' > stim.id"
bl dataset upload --datatype $stimulusId --project $projectId --subject "justinTest" --json ./stimulus | jq -r '._id' > stim.id

# upload data
echo "(runpRF) uploading tseries as datatype:$boldId to project:$projectId"
bl dataset upload --datatype $boldId --project $projectId --subject "justinTest" --datatype_tag "prf" --json ./task| jq -r '._id' > func.id


# Run the pRF app
echo "(runpRF) running app:$appId with tseries:$(cat func.id) stimimage:$(cat stim.id)"
bl app run --id $appId --project $projectId --input tseries:$(cat func.id) --input stimimage:$(cat stim.id) --config '{"frameperiod": "1.3"}' --json | jq -r '._id' > task.id


# Waiting for the App to finish (and archive output datasets)
echo "(runpRF) waiting for app to finish"
bl app wait $(cat task.id)
if [ ! $? -eq 0 ]
then
   echo "app failed"
   exit 1
fi
echo "finished!"

# Download the ouput dataset
echo "(runpRF) downloadind data"
bl dataset download -i  
for id in $(bl dataset query --taskid $(cat task.id) --json | jq -r ".[]._id"); do
    echo "(runpRF) downloading dataset $id"
    bl dataset download $id
done

